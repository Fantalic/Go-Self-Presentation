package main

import (
	"fmt"

	"github.com/eiannone/keyboard"
	"github.com/k0kubun/go-ansi"
)

func main() {
	// Get the current cursor position
	var x, startLine = ansi.CursorPosition()

	// Define the options and their values
	options := []string{"Option 1", "Option 2", "Option 3"}
	optionValues := []int{0, 0, 0}
	explanationText := "Use arrow keys to select an option"

	// Initialize the keyboard input reader
	if err := keyboard.Open(); err != nil {
		panic(err)
	}
	defer func() {
		_ = keyboard.Close()
	}()

	// Print out the initial state
	fmt.Println(explanationText)
	for i, option := range options {
		fmt.Printf("[%s] %s\n", getOptionChar(i, optionValues), option)
	}

	// Loop to read user input
	for {
		_, key, err := keyboard.GetKey()
		if err != nil {
			panic(err)
		}

		if key == keyboard.KeyArrowUp {
			// Move the selected option up
			selectedIndex := getSelectedOptionIndex(optionValues)
			if selectedIndex > 0 {
				optionValues[selectedIndex] = 0
				optionValues[selectedIndex-1] = 1
			}
			updateOptions(options, optionValues)
		} else if key == keyboard.KeyArrowDown {
			// Move the selected option down
			selectedIndex := getSelectedOptionIndex(optionValues)
			if selectedIndex < len(options)-1 {
				optionValues[selectedIndex] = 0
				optionValues[selectedIndex+1] = 1
			}
			updateOptions(options, optionValues)
		} else if key == keyboard.KeyEnter {
			// Exit the program
			break
		}
	}
}

// Helper function to get the character to represent an option based on its value
func getOptionChar(i int, optionValues []int) string {
	if optionValues[i] == 1 {
		return "X"
	} else {
		return " "
	}
}

// Helper function to get the index of the currently selected option
func getSelectedOptionIndex(optionValues []int) int {
	for i, value := range optionValues {
		if value == 1 {
			return i
		}
	}
	return 0
}

// Helper function to update the options display
func updateOptions(options []string, optionValues []int, startLine int) {
	// Clear the previous options display
	clearScreenFromTop(startLine)

	// Print the updated options display
	fmt.Println("Use arrow keys to select an option")
	for i, option := range options {
		fmt.Printf("[%s] %s\n", getOptionChar(i, optionValues), option)
	}
}

// Helper function to clear the console screen from a given line number
func clearScreenFromTop(line int) {
	fmt.Printf("\033[%d;0H\033[2J", line)
}
